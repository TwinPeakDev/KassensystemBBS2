@page "/ProductDetail"
@using Kassensystem.Data
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject DialogService DialogService
@inject ILogger<ProductDetail> Logger


@implements IAsyncDisposable




<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Center" >
    <RadzenTextBox @bind-Value="@CurProduct.Name" Placeholder="Name"></RadzenTextBox>
    <RadzenNumeric @bind-Value="CurProduct.PriceEuro" Placeholder="Preis â‚¬" Min="0" TValue="double"></RadzenNumeric>
    @if (CurProduct.Image != null)
    {
        <RadzenImage Path="@CurProduct.Image"></RadzenImage>
    }
    <RadzenButton ButtonStyle="ButtonStyle.Success" Text="Speichern" Click="Save" Disabled="@(!CurProduct.ReadyToSave())" ></RadzenButton>
</RadzenStack>
    



@code {
    [Parameter]
    public Product? CurProduct { get; set; }
    
    private HubConnection? hubConnection;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        CurProduct ??= new Product();
        
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/datahub"))
            .Build();

        await hubConnection.StartAsync();
        

    }


    private async Task Save()
    {
        try
        {
            await hubConnection.SendAsync("SaveProduct", CurProduct);
            Logger.LogInformation($"Product ID:{CurProduct.Id} Name:{CurProduct.Name} was saved.");
        }
        catch (Exception e)
        {
            Logger.LogError(e + $" | while trying to save Product ID:{CurProduct.Id} Name:{CurProduct.Name}");
        }
        await DisposeAsync();
        DialogService.Close();
        
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    
}