@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.EntityFrameworkCore;
@using Kassensystem.Data;
@using Kassensystem.Hubs;
@inject NavigationManager Navigation
@inject IDbContextFactory<ApplicationDbContext> _contextFactory;

@implements IAsyncDisposable



<PageTitle>Index</PageTitle>

<div class="form-group">
    <label>
        User:
        <RadzenTextBox @bind-Value=@userInput TValue="string" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <RadzenTextBox @bind-Value=@messageInput TValue="string" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput = "TestUser";
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/datahub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On("PaymentSaved", () => 
        {
            ///TODO: implement update after payment has been saved (maybe list past sales in a grid / update that grid)
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    private async Task SavePayment(Sold sold)
    {
        if(hubConnection is not null)
        {
            await hubConnection.SendAsync("SavePayment", sold);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}